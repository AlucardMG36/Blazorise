@page "/tests/modal-provider"

<Row>
    <Column ColumnSize="ColumnSize.IsFull">
        <Card Margin="Margin.Is4.OnY">
            <CardHeader>
                <CardTitle>ModalProvider</CardTitle>
            </CardHeader>
            <CardBody>
                <Paragraph>
                    Render a custom component with default modal structure.
                </Paragraph>
                <Paragraph>
                    Example shows a Counter component that renders a random number that's passed as a parameter from this page.
                </Paragraph>
                <Button Color="Color.Primary" Clicked="ShowCounter">Show</Button>
            </CardBody>

            <CardBody>
                <Paragraph>
                    Render a custom component and define modal structure inside it by overriding the modal provider options. Take advantage of passing in parameters.
                </Paragraph>
                <Paragraph>
                    Example shows a simple formulary that does a simple not empty validation and passes back the result to this page by making clever use of parameters.
                </Paragraph>
                <Paragraph>
                    @formularyMessage
                </Paragraph>
                <Button Color="Color.Success" Clicked="ShowFormulary">Show</Button>
            </CardBody>

            <CardBody>
                <Paragraph>
                    Example shows the opening of a modal that opens another modal itself by using the ModalService.
                </Paragraph>
                <Button Color="Color.Success" Clicked="ShowModalWithinModal">Show</Button>
            </CardBody>
        </Card>
    </Column>
</Row>


@code {

    [Inject] public IModalService ModalService { get; set; }

    private string formularyMessage = "";
    public Task ShowCounter()
    {
        Random random = new();
        var newValue = random.NextInt64(100);
        return ModalService.Show<Counter>("My Custom Content!", x => x.Add(x => x.Value, newValue));
    }

    public Task ShowFormulary()
    {
        formularyMessage = string.Empty;
        return ModalService.Show<FormularyModal>(x =>
        {
            x.Add(x => x.OnValidate, FormularyValidate);
            x.Add(x => x.OnSuccess, FormularySuccess);
        },
        new ModalProviderOptions()
            {
                UseModalStructure = false
            });
    }

    private Task<bool> FormularyValidate(Employee employee)
        => Task.FromResult(!string.IsNullOrWhiteSpace(employee.FirstName) && !string.IsNullOrWhiteSpace(employee.Email));

    private Task FormularySuccess(Employee employee)
    {
        formularyMessage = $"Employee : {employee.FirstName} saved successfully!";
        return InvokeAsync(StateHasChanged);
    }

    //TODO
    private Task ShowModalWithinModal()
        => Task.CompletedTask;
}